#!/usr/bin/env python3
# Convert png palettes to GBA palettes
# Executes with build directory as the current working directory
import PIL, glob, os, sys
from PIL import Image

palettes = {}

if len(sys.argv) != 2:
	print("encodepalettes.py output.s")
else:
	out_s_name = sys.argv[1]
	out_h_name = out_s_name[:-1] + 'h'

	# Read all the input palette files
	for f in glob.glob("../palettes/*.png"):
		# Name of the palette is the filename with path and extension taken out
		name = os.path.splitext(os.path.basename(f))[0]
		palettes[name] = []

		im = Image.open(f)
		pal = im.getpalette()[3:]
		# Use width to find the number of colors
		for i in range(im.width):
			r = pal.pop(0)
			g = pal.pop(0)
			b = pal.pop(0)
			bgr555 = ((r//8)|((g//8)<<5)|((b//8)<<10))
			line = "\t.hword 0x%.4x\n" % bgr555
			palettes[name].append(line)
		im.close()

	# Write the converted palette header file
	out_h = open(out_h_name, "w")
	out_h.write("//{{BLOCK(palettedata)\n")
	out_h.write("// Automatically generated by encodepalettes.py\n")
	out_h.write("#ifndef PALETTE_DATA_H\n")
	out_h.write("#define PALETTE_DATA_H\n")
	for pal, data in palettes.items():
		out_h.write('#define %sPalSize %d\n' % (pal, 2*len(data)))
		out_h.write('extern const unsigned short %sPalData[%d];\n' % (pal, len(data)))
	out_h.write("#endif\n")
	out_h.write("//}}BLOCK(palettedata)\n")
	out_h.close()

	# Write the converted palettes
	out_s = open(out_s_name, "w")
	out_s.write("@{{BLOCK(palettedata)\n")
	out_s.write("@Automatically generated by encodepalettes.py\n")
	out_s.write("\t.section .rodata\n")
	out_s.write("\t.align\t2\n")
	for pal, data in palettes.items():
		out_s.write('\t.global %sPalData\n' % pal)
		out_s.write('\t.hidden %sPalData\n' % pal)
		out_s.write('%sPalData:\n' % pal)
		for line in data:
			out_s.write(line)
		out_s.write('\n')
	out_s.write("@}}BLOCK(palettedata)\n")
	out_s.close()
